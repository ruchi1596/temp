{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 61
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location to deploy"
      }
    },
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "billingMethod": {
      "type": "string",
      "allowedValues": [
        "byol",
        "hourly"
      ],
      "defaultValue": "byol",
      "metadata": {
        "description": "Type of Deployment"
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Unique name for the Storage Account where the machines disks will be placed."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Type of Storage Account chosen"
      }
    },
    "storageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Storage Account chosen new or existing"
      }
    },
    "storageAccountResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of existing storage account(if existing is chosen)"
      }
    },
    "dnsNameForIP": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the WAF."
      }
    },
    "publicIPAddressName": {
      "type": "string"
    },
    "vNETNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Storage Account chosen new or existing"
      }
    },
    "vNETResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "VNET Resource Group Name(if an existing VNET is used)."
      }
    },
    "vNETName": {
      "type": "string"
    },
    "addressPrefix": {
      "defaultValue": "10.0.0.0/16",
      "type": "string",
      "metadata": {
        "description": "Address prefix of the network for Barracuda VM."
      }
    },
    "subnetPrefix": {
      "defaultValue": "10.0.0.0/24",
      "type": "string",
      "metadata": {
        "description": "Subnet prefix of the network for Barracuda VM."
      }
    },
    "subnetName": {
      "type": "string"
    },
    "instanceCount": {
      "type": "string",
      "defaultValue": "2",
      "metadata": {
        "description": "Number of VM instances (20 or less)."
      }
    },
    "minInstanceCount": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "Number of VM instances (20 or less)."
      }
    },
    "maxInstanceCount": {
      "type": "string",
      "defaultValue": "4",
      "metadata": {
        "description": "Number of VM instances (20 or less)."
      }
    },
    "bootDiagnostics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable boot diagnostics for the vmss instances."
      }
    },
    "scaleUpCpu": {
      "type": "string",
      "defaultValue": "85",
      "metadata": {
        "description": "Scale up instance when average CPU utilization crosses this %."
      }
    },
    "scaleUpNetworkIn": {
      "type": "string",
      "defaultValue": "9175040",
      "metadata": {
        "description": "Scale up instance when network in bytes are more than this."
      }
    },
    "scaleUpNetworkOut": {
      "type": "string",
      "defaultValue": "9175040",
      "metadata": {
        "description": "Scale up instance when network out bytes are more than this."
      }
    },
    "scaleDownCpu": {
      "type": "string",
      "defaultValue": "60",
      "metadata": {
        "description": "Scale up instance when average CPU utilization crosses this %."
      }
    },
    "scaleDownNetworkIn": {
      "type": "string",
      "defaultValue": "5242880",
      "metadata": {
        "description": "Scale up instance when network in bytes are more than this."
      }
    },
    "scaleDownNetworkOut": {
      "type": "string",
      "defaultValue": "5242880",
      "metadata": {
        "description": "Scale up instance when network out bytes are more than this."
      }
    },
    "azureOverprovisioning": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "overprovisioning is true or false."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "wafSharedSecret": {
      "type": "string",
      "defaultValue": "secret",
      "metadata": {
        "description": "Shared secret to be used when clustering barracuda waf instances."
      }
    },
    "azureAuthenticationMethod": {
      "type": "string",
      "allowedValues": [
        "AZURE_USER_PASSWORD",
        "AZURE_SERVICE_PRINCIPAL"
      ],
      "defaultValue": "AZURE_USER_PASSWORD",
      "metadata": {
        "description": "Choose authentication method which WAF will use make API calls. If you choose AZURE_USER_PASSWORD provide values for (azureUserId and azureUserPassword). For AZURE_SERVICE_PRINCIPAL please provide details for (azureClientId, azureTenantId and azureTenantId)."
      }
    },
    "azureUserId": {
      "type": "string",
      "defaultValue": " ",
      "metadata": {
        "description": "Azure AD user name."
      }
    },
    "azureUserPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Azure AD user password."
      }
    },
    "azureClientId": {
      "type": "string",
      "defaultValue": " ",
      "metadata": {
        "description": "Azure client id for Azure API calls.Refer https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-service-principal-portal for more details."
      }
    },
    "azureTenantId": {
      "type": "string",
      "defaultValue": " ",
      "metadata": {
        "description": "Azure tenant id for Azure API calls."
      }
    },
    "azureSecretKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Azure secret key for Azure API calls."
      }
    },
    "wafBootstrapMethod": {
      "type": "string",
      "allowedValues": [
        "NO_BOOTSTRAPING",
        "BASIC_SERVICE_BOOTSTRAP",
        "BACKUP_BASED_BOOTSTRAP"
      ],
      "defaultValue": "BACKUP_BASED_BOOTSTRAP",
      "metadata": {
        "description": "Choose bootstapping method to be used when Barracuda WAF gets launched.If you choose BACKUP_BASED_BOOTSTRAP please provide (azureStorageAccountName, azureStorageAccountKey, azureStorageBlobName and azureBootstrapBackupFilename). This will be used to download the backup file from blob storage and restore during first bootup. For option BASIC_SERVICE_BOOTSTRAP please provide (wafServiceName, wafServicePort, wafServerIp, wafServerHostName)."
      }
    },
    "azureStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure storage account where bootstrap backup file is uploaded."
      }
    },
    "azureStorageAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Azure storage key associated with azure storage account."
      }
    },
    "azureStorageBlobName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure blob name where backup file is uploaded."
      }
    },
    "azureBootstrapBackupFiletype": {
      "type": "string",
      "allowedValues": [
        "bak",
        "json"
      ],
      "defaultValue": "bak",
      "metadata": {
          "description": "Type of backup file"
      }
    },
    "azureBootstrapBackupFilename1": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Backup filename which needs to be bootstrapped.If backup bootstrap details are configured, basic service bootstrap parameters will be ignored."
      }
    },
    "azureBootstrapBackupFilename": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Backup filename which needs to be bootstrapped.If backup bootstrap details are configured, basic service bootstrap parameters will be ignored."
      }
    },
    "licenseStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "License Storage Account Name"
      }
    },
    "licenseStorageAccountKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "License Storage Account Key"
      }
    },
    "licenseContainerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "License Storage Container Name"
      }
    },
    "defaultDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Domain Name"
      }
    },
    "eulaUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the user accepting EULA."
      }
    },
    "eulaUserEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Email ID of the user accepting the EULA."
      }
    },
    "eulaUserCompany": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Compnay Name of the user accepting EULA."
      }
    },
    "wafServiceName": {
      "type": "string",
      "defaultValue": "waf_service_1",
      "metadata": {
        "description": "WAF service name. Service bootstrapping parameters will be used only if backup bootstrap details are not provided."
      }
    },
    "wafServicePort": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "WAF service port. HTTP(s) service type not supported.Use WAF UI/Rest API to create any service type that requires a certificate to be uploaded."
      }
    },
    "wafServers": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Comma separated list of server:port with identifier being IP or hostname. Example 10.0.1.70:80,10.0.1.71:80,www.abc.com:80,www.xyz:80"
      }
    },
    "wafOmsPrimaryKey": {
      "type": "string",
      "defaultValue": "NONE",
      "metadata": {
        "description": "Enter the Primary Key of the Microsoft Azure OMS portal. (Primary Key is available in the Microsoft Operations Management Suite portal, Settings > Connected Sources > Linux Servers page)."
      }
    },
    "wafOmsWorkspaceId": {
      "type": "string",
      "defaultValue": "NONE",
      "metadata": {
        "description": "Enter the Workspace ID of the Microsoft Azure OMS portal. (Workspace ID is available in the Microsoft Operations Management Suite portal, Settings > Connected Sources > Linux Servers page)."
      }
    },
    "wafNotifyEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Comma-delimited email addresses where the alerts are also sent"
      }
    },
    "albHealthProbeProtocol": {
      "type": "string",
      "allowedValues": [
        "tcp",
        "http"
      ],
      "defaultValue": "tcp",
      "metadata": {
        "description": "Health Probe type."
      }
    },
    "albHealthProbePort": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "Health Probe Port."
      }
    },
    "albHealthProbePath": {
      "type": "string",
      "defaultValue": "/",
      "metadata": {
        "description": "Health Probe Path for HTTP based probes."
      }
    },
    "albHealthProbeInterval": {
      "type": "string",
      "defaultValue": "10",
      "metadata": {
        "description": "Health Probe time interval between probes."
      }
    },
    "albHealthProbeUnhealthyThreshold": {
      "type": "string",
      "defaultValue": "5",
      "metadata": {
        "description": "The number of consecutive probe failures that must occur before a virtual machine is marked unhealthy."
      }
    },
    "albRuleFrontEndPort": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "Frontend port for the incoming requests."
      }
    },
    "albRuleBackEndPort": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "Backend port for forwarding the request to servers."
      }
    },
    "albRulePersistency": {
      "type": "string",
      "allowedValues": [
        "Default",
        "SourceIP",
        "SourceIPProtocol"
      ],
      "defaultValue": "SourceIPProtocol",
      "metadata": {
        "description": "Persistency method to be used by the azure load balancer."
      }
    }
  },
  "variables": {
    "storageAccountTier": "[replace(parameters('storageAccountType'),'_LRS','')]",
    "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "loadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "natPoolName": "[concat(variables('namingInfix'), 'natpool')]",
    "natPoolNameHttps": "[concat(variables('namingInfix'), 'natpoolHttps')]",
    "bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
    "autoScaleName": "[concat(variables('namingInfix'), 'autoscalewad')]",
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "customEmails": "[split(parameters('wafNotifyEmail'), ',')]",
    "emptyArray": [],
    "sendNotifications": "[not(empty(parameters('wafNotifyEmail')))]",
    "wafClusteringMode": "[if(parameters('azureOverprovisioning'), 'ALL_PEER_METHOD', 'MASTER_SLAVE_METHOD')]",
    "imagePublisher": "barracudanetworks",
    "imageVersion": "latest",
    "imageSKU": "[parameters('billingMethod')]",
    "imageOffer": "waf",
    "useNewStorageAccount": "[equals(parameters('storageAccountNewOrExisting'), 'new')]",
    "useNewVnet": "[equals(parameters('vNETNewOrExisting'), 'new')]",
    "vnetID": "[resourceId(parameters('vNETResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vNETName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "osType": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[variables('imageOffer')]",
      "sku": "[variables('imageSKU')]",
      "version": "[variables('imageVersion')]"
    },
    "imagePlan": {
      "name": "[variables('imageSKU')]",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "imageReference": "[variables('osType')]",
    "userData": {
      "vmss_instance": true,
      "az_resource_group": "[resourceGroup().name]",
      "az_subscription_id": "[subscription().subscriptionId]",
      "az_vmss_name": "[variables('namingInfix')]",
      "waf_auth_method": "[parameters('azureAuthenticationMethod')]",
      "az_user_id": "[parameters('azureUserId')]",
      "az_user_password": "[parameters('azureUserPassword')]",
      "az_secret_key": "[parameters('azureSecretKey')]",
      "az_client_id": "[parameters('azureClientId')]",
      "az_tenant_id": "[parameters('azureTenantId')]",
      "waf_clustering_mode": "[variables('wafClusteringMode')]",
      "waf_allow_product_patches": "No",
      "waf_bootstrap_method": "[parameters('wafBootstrapMethod')]",
      "waf_shared_secret": "[parameters('wafSharedSecret')]",
      "az_storage_account_name": "[parameters('azureStorageAccountName')]",
      "az_storage_account_key": "[parameters('azureStorageAccountKey')]",
      "az_storage_blob_name": "[parameters('azureStorageBlobName')]",
      "az_bootstrap_backup_filename": "[if(equals(parameters('azureBootstrapBackupFiletype'),'bak'), parameters('azureBootstrapBackupFilename'), parameters('azureBootstrapBackupFilename1'))]",
      "service_name": "[parameters('wafServiceName')]",
      "service_port": "[parameters('wafServicePort')]",
      "servers": "[parameters('wafServers')]",
      "waf_oms_primary_key": "[parameters('wafOmsPrimaryKey')]",
      "waf_oms_workspace_id": "[parameters('wafOmsWorkspaceId')]",
      "license_storage_account": "[parameters('licenseStorageAccountName')]",
      "license_storage_account_key": "[parameters('licenseStorageAccountKey')]",
      "license_container_name": "[parameters('licenseContainerName')]",
      "default_domain": "[parameters('defaultDomainName')]",
      "signature": "[parameters('eulaUserName')]",
      "email": "[parameters('eulaUserEmail')]",
      "organization": "[parameters('eulaUserCompany')]"
    },
    "barracudaNetworksTags": {
      "type": "object",
      "provider": "3285C15D-A16F-479C-8886-67042BCB03A9"
    },
    "customData": "[string(variables('userData'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "condition": "[variables('useNewStorageAccount')]",
      "apiVersion": "2017-06-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "wafStorageName",
        "provider": "[variables('barracudaNetworksTags').provider]"
      },
      "kind": "Storage",
      "sku": {
        "name": "[parameters('storageAccountType')]",
        "tier": "[variables('storageAccountTier')]"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "condition": "[variables('useNewVnet')]",
      "apiVersion": "2017-03-01",
      "name": "[parameters('vNETName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/',parameters('vmssName'),'NSG')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('vmssName'),'NSG'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2017-03-01",
      "name": "[parameters('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForIP')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "condition": "[variables('useNewVnet')]",
      "apiVersion": "2017-03-01",
      "name": "[concat(parameters('vmssName'),'NSG')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "NSG-WAF",
        "provider": "[variables('barracudaNetworksTags').provider]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "http-mgmt",
            "properties": {
              "description": "MGMT_-_HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1010,
              "direction": "Inbound"
            }
          },
          {
            "name": "https",
            "properties": {
              "description": "HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1020,
              "direction": "Inbound"
            }
          },
          {
            "name": "https-mgmt",
            "properties": {
              "description": "MGMT_-_HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1030,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2017-03-01",
      "name": "[variables('loadBalancerName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "WAFLoadBalanceRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('lbID'), '/frontendIpConfigurations/', 'LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('lbID'), '/backendAddressPools/', variables('bePoolName') )]"
              },
              "probe": {
                "id": "[concat(variables('lbID'), '/probes/', 'WAF-Health-Probe')]"
              },
              "protocol": "Tcp",
              "frontendPort": "[parameters('albRuleFrontEndPort')]",
              "backendPort": "[parameters('albRuleBackEndPort')]",
              "idleTimeoutInMinutes": 15,
              "loadDistribution": "[parameters('albRulePersistency')]"
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "[parameters('albHealthProbeProtocol')]",
              "port": "[parameters('albHealthProbePort')]",
              "requestPath": "[if(equals(parameters('albHealthProbeProtocol'),'http'), parameters('albHealthProbePath'), json('null'))]",
              "intervalInSeconds": "[parameters('albHealthProbeInterval')]",
              "numberOfProbes": "[parameters('albHealthProbeUnhealthyThreshold')]"
            },
            "name": "WAF-Health-Probe"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "8000",
              "frontendPortRangeEnd": "8100",
              "backendPort": "8000"
            }
          },
          {
            "name": "[variables('natPoolNameHttps')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "8443",
              "frontendPortRangeEnd": "8543",
              "backendPort": "8443"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2017-03-30",
      "name": "[variables('namingInfix')]",
      "location": "[parameters('location')]",
      "plan": "[variables('imagePlan')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('vNETName'))]"
      ],
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": "[parameters('azureOverprovisioning')]",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite"
            },
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "will-be-replaced-by-admin",
            "adminPassword": "[parameters('adminPassword')]",
            "customData": "[base64(variables('customData'))]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('lbID'), '/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('lbID'), '/inboundNatPools/', variables('natPoolName'))]"
                          },
                          {
                            "id": "[concat(variables('lbID'), '/inboundNatPools/', variables('natPoolNameHttps'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "[parameters('bootDiagnostics')]",
              "storageUri": "[reference(resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2017-06-01').primaryEndpoints.blob]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2015-04-01",
      "name": "[variables('autoScaleName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]"
      ],
      "properties": {
        "name": "[variables('autoScaleName')]",
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
        "enabled": true,
        "notifications": [
          {
            "operation": "Scale",
            "email": {
              "sendToSubscriptionAdministrator": false,
              "sendToSubscriptionCoAdministrators": false,
              "customEmails": "[if(variables('sendNotifications'), variables('customEmails'), variables('emptyArray'))]"
            }
          }
        ],
        "profiles": [
          {
            "name": "BWAF_default_profile",
            "capacity": {
              "minimum": "[parameters('minInstanceCount')]",
              "maximum": "[parameters('maxInstanceCount')]",
              "default": "[parameters('instanceCount')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT15M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('scaleUpCpu')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT60M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('scaleDownCpu')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Network In",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT15M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('scaleUpNetworkIn')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Network In",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT60M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('scaleDownNetworkIn')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Network Out",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT15M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('scaleUpNetworkOut')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Network Out",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT60M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('scaleDownNetworkOut')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              }
            ]
          }
        ]
      }
    }
  ]
}

